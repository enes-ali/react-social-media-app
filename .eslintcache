[{"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\index.js":"1","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\App.js":"2","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\reportWebVitals.js":"3","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\navbar.js":"4","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\mobile_navbar.js":"5","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\reducers\\reducer.js":"6","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\login_form.js":"7","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\actions.js":"8"},{"size":712,"mtime":1611770943570,"results":"9","hashOfConfig":"10"},{"size":1107,"mtime":1611855910329,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2581,"mtime":1611856195908,"results":"13","hashOfConfig":"10"},{"size":3139,"mtime":1611859579412,"results":"14","hashOfConfig":"10"},{"size":722,"mtime":1611855937937,"results":"15","hashOfConfig":"10"},{"size":2561,"mtime":1611855376913,"results":"16","hashOfConfig":"10"},{"size":225,"mtime":1611856213911,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"10sjywi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\index.js",[],["38","39"],"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\App.js",[],"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\reportWebVitals.js",[],"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\navbar.js",["40","41","42"],"import React from \"react\";\r\nimport \"../styles/navbar.css\";\r\nimport menu_icon from \"../images/menu.svg\";\r\nimport brand_logo from \"../images/brand_logo.svg\";\r\nimport MobileNavbar from \"./mobile_navbar.js\"\r\nimport {connect} from \"react-redux\";\r\nimport {Link} from 'react-router-dom';\r\nimport {logout} from \"../actions.js\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\n\r\nclass Navbar extends React.Component{\r\n\r\n    logout = (event) => {\r\n        let cookie = new Cookies();\r\n        cookie.remove(\"token\", {path: \"/\"});\r\n        this.props.logout();\r\n    } \r\n\r\n    get_navigation = () => {\r\n        if(this.props.is_authenticated){\r\n            return(\r\n                <ul id=\"navbar-navigation\">          \r\n                    <li className=\"navigation-index\"><a href=\"\" className=\"navlink\">Posts</a></li>\r\n                    <li className=\"navigation-index\"><a href=\"{% url 'upload_post' %}\" className=\"navlink\">Upload</a></li>\r\n                    <li className=\"navigation-index\" onClick={this.logout}><a className=\"navlink\">Log out</a></li>\r\n                    <a href=\"\"><img id=\"navigation-profile-photo\" src={`http://localhost${this.props.account.profile_photo}`} alt=\"\" /></a>\r\n                 </ul>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <ul id=\"navbar-navigation\">          \r\n                    <li className=\"navigation-index\"><Link to=\"/login\" className=\"navlink\">Log In</Link></li>\r\n                </ul>\r\n            );\r\n        }\r\n    }\r\n\r\n    open_overlay = () =>{\r\n        this.mobileNavbar.overlayMenu.classList.remove(\"overlay-menu-disabled\");\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <nav id=\"navbar\">\r\n                <div id=\"navbar-brand-container\" className=\"centered\">\r\n                    <img src={brand_logo} alt=\"Brand Img\" id=\"brand-logo\" />\r\n                </div>\r\n                {this.get_navigation()}\r\n                <img src={menu_icon} alt=\"Logo\" id=\"open-overlay-menu\" onClick={this.open_overlay}/>\r\n\r\n                <MobileNavbar ref={(ref) => this.mobileNavbar = ref} account={this.props.account} \r\n                    is_authenticated={this.props.is_authenticated}\r\n                    logout={this.logout}/>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nfunction setStateToProps(state, oldProps){\r\n    return{\r\n        account: state.account,\r\n        is_authenticated: state.is_authenticated,\r\n    }\r\n}\r\n\r\nfunction mapPropsToDispatch(dispatch){\r\n    return{\r\n        logout: () => dispatch(logout),\r\n    }\r\n}\r\n\r\nexport default connect(setStateToProps, mapPropsToDispatch)(Navbar);","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\mobile_navbar.js",["43","44","45","46","47","48","49","50","51"],"import React from 'react';\r\nimport close_overlay from '../images/close.svg';\r\nimport account_icon from \"../images/account.svg\";\r\nimport login_icon from \"../images/login.svg\";\r\nimport logout_icon from \"../images/logout.svg\";\r\nimport settings_icon from \"../images/settings.svg\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass MobileNavbar extends React.Component{\r\n\r\n    close_when_choose = (event) => {\r\n        this.overlayMenu.classList.add(\"overlay-menu-disabled\");\r\n    }\r\n\r\n    get_navigation = () => {\r\n        if(this.props.is_authenticated){\r\n            return(     \r\n                <ul id=\"overlay-navigation\" onClick={this.close_when_choose}>\r\n                    <li className=\"overlay-navigation-index\"><a href=\"\" className=\"overlay-navlink\"><img className=\"overlay-navlink-icon\" src={account_icon}/> <p>Account</p></a></li>    \r\n                    <li className=\"overlay-navigation-index\"><a href=\"{% url 'upload_post' %}\" className=\"overlay-navlink\"><img className=\"overlay-navlink-icon\" src={account_icon} /> <p>Upload</p></a></li>\r\n                    <li className=\"overlay-navigation-index\"><a href=\"\" className=\"overlay-navlink\"><img className=\"overlay-navlink-icon\" src={settings_icon} /> <p>Settings</p></a></li>\r\n                    <li onClick={this.props.logout} className=\"overlay-navigation-index\"><a className=\"overlay-navlink\"><img className=\"overlay-navlink-icon\" src={logout_icon}/> <p>Log out</p></a></li>\r\n                </ul>\r\n            );\r\n        }\r\n        else{\r\n            return(   \r\n                <ul id=\"overlay-navigation\" onClick={this.close_when_choose}>\r\n                    <li className=\"overlay-navigation-index\"><Link to=\"/login\" className=\"overlay-navlink\"><img className=\"overlay-navlink-icon\" src={login_icon} /> <p>Login</p></Link></li>\r\n                </ul>\r\n            );\r\n        }\r\n    }\r\n\r\n    get_header = () => {\r\n        if(this.props.is_authenticated){\r\n            return(\r\n                <div id=\"overlay-menu-header\">\r\n                    <img src={`http://localhost${this.props.account.profile_photo}`} alt=\"profile photo\" id=\"overlay-menu-profile-photo\"/>\r\n                    <div id=\"overlay-menu-profile-info\">\r\n                        <p id=\"overlay-menu-profile-username\">{this.props.account.username}</p>\r\n                    </div>\r\n                    <img src={close_overlay} alt=\"Close Icon\" id=\"close-overlay-menu\" onClick={this.close_overlay}/>\r\n                </div>\r\n            );\r\n        }else{\r\n            return(\r\n                <div id=\"overlay-menu-header\">\r\n                    <img src={close_overlay} alt=\"Close Icon\" id=\"close-overlay-menu\" onClick={this.close_overlay}/>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    close_overlay = () =>{\r\n        this.overlayMenu.classList.add(\"overlay-menu-disabled\");\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"overlay-menu  overlay-menu-disabled\" ref={(ref) => this.overlayMenu = ref}>\r\n\r\n                {this.get_header()}\r\n\r\n                {this.get_navigation()}\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MobileNavbar;","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\reducers\\reducer.js",[],"C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\Components\\login_form.js",["52"],"import React from 'react';\r\nimport \"../styles/login_form.css\";\r\nimport brand_logo from '../images/brand_logo.svg';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport Cookies from 'universal-cookie';\r\nimport {Link} from \"react-router-dom\";\r\nimport {login} from \"../actions.js\";\r\n\r\n\r\nclass LoginForm extends React.Component{\r\n\r\n    state = {\r\n\r\n    }\r\n\r\n    login = (event) => {\r\n        event.preventDefault();\r\n        let post_data = {\r\n            username: this.state.email,\r\n            password: this.state.password,\r\n        }\r\n        axios.post(\"http://localhost:80/api/login/\", post_data)\r\n        .then((response) => {\r\n            let token = response.data.token;\r\n\r\n            axios.get(`http://localhost:80/api/user?token=${token}`)\r\n            .then((response) => {\r\n                let account = response.data;\r\n                this.props.login(token, account, true);                \r\n                let cookie = new Cookies();\r\n                cookie.set(\"token\", token, {path:\"/\"})\r\n                \r\n                this.props.history.push(\"/\");\r\n            });\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handle_input_change = (event) =>{\r\n        this.setState({\r\n            ...this.state,\r\n            [event.target.id]: event.target.value,\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"form-container\">\r\n                <form method=\"POST\" id=\"login-form\" onSubmit={this.login}>\r\n                    <img src={brand_logo} alt=\"Brand Logo\" id=\"form-brand-logo\" />\r\n                    \r\n                    <div id=\"input-container\">\r\n                        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" onChange={this.handle_input_change}/>\r\n                        <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" onChange={this.handle_input_change}/>\r\n                    </div>\r\n                \r\n                    <button type=\"submit\" id=\"login-button\">Log in</button>\r\n\r\n                    <div id=\"signup\">\r\n                        <p>Dont have a account</p>\r\n                        <a href=\"{% url 'register' %}\">Sign Up</a>\r\n                    </div>\r\n                \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, oldProps){\r\n    return{\r\n        \r\n    }\r\n}\r\n\r\nfunction mapPropsToDispatch(dispatch){\r\n    return{\r\n        login: (token, account, auth) => dispatch(login(token, account, auth)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapPropsToDispatch)(LoginForm);","C:\\Users\\enes_\\Desktop\\backtemp\\react\\posts\\src\\actions.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":24,"column":54,"nodeType":"59","endLine":24,"endColumn":85},{"ruleId":"57","severity":1,"message":"60","line":26,"column":76,"nodeType":"59","endLine":26,"endColumn":99},{"ruleId":"57","severity":1,"message":"58","line":27,"column":21,"nodeType":"59","endLine":27,"endColumn":32},{"ruleId":"57","severity":1,"message":"58","line":20,"column":62,"nodeType":"59","endLine":20,"endColumn":101},{"ruleId":"61","severity":1,"message":"62","line":20,"column":101,"nodeType":"59","endLine":20,"endColumn":159},{"ruleId":"61","severity":1,"message":"62","line":21,"column":124,"nodeType":"59","endLine":21,"endColumn":183},{"ruleId":"57","severity":1,"message":"58","line":22,"column":62,"nodeType":"59","endLine":22,"endColumn":101},{"ruleId":"61","severity":1,"message":"62","line":22,"column":101,"nodeType":"59","endLine":22,"endColumn":161},{"ruleId":"57","severity":1,"message":"60","line":23,"column":90,"nodeType":"59","endLine":23,"endColumn":121},{"ruleId":"61","severity":1,"message":"62","line":23,"column":121,"nodeType":"59","endLine":23,"endColumn":178},{"ruleId":"61","severity":1,"message":"62","line":30,"column":108,"nodeType":"59","endLine":30,"endColumn":165},{"ruleId":"63","severity":1,"message":"64","line":40,"column":21,"nodeType":"59","endLine":40,"endColumn":139},{"ruleId":"65","severity":1,"message":"66","line":7,"column":9,"nodeType":"67","messageId":"68","endLine":7,"endColumn":13},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]